---
- hosts: localhost
  become: yes
  vars:
    main_user: sadat
    user_home: "/home/{{ main_user }}"
    aur_pkgs_dir: "{{ user_home }}/.aur_pkgs"
    zsh_version: 5.9
    zsh_source_url: "https://sourceforge.net/projects/zsh/files/zsh/{{ zsh_version }}/zsh-{{ zsh_version }}.tar.xz"
    zsh_sha256: 9b8d1ecedd5b5e81fbf1918e876752a7dd948e05c1a0dba10ab863842d45acd5
    ohmyzsh_commit: 3ff8c7e
    ohmyzsh_dir: /usr/share/oh-my-zsh
  tasks:
    - name: Ensure main user exists
      user:
        name: "{{ main_user }}"
        state: present
      register: user_check

    - name: Fail if user home does not exist
      fail:
        msg: "Home directory for {{ main_user }} ({{ user_home }}) does not exist!"
      when: not user_check.state == 'present' or not (user_home | stat).exists

    - name: Update system
      pacman:
        update_cache: yes
        upgrade: yes
      register: pacman_update

    - name: Install base packages
      pacman:
        name:
          - base-devel
          - git
          - curl
          - terminus-font
          - xorg-mkfontscale
        state: present
      when: pacman_update.changed or pacman_update.failed

    - name: Create AUR packages directory
      file:
        path: "{{ aur_pkgs_dir }}"
        state: directory
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '0755'

    - name: Download zsh-{{ zsh_version }} source
      get_url:
        url: "{{ zsh_source_url }}"
        dest: "/tmp/zsh-{{ zsh_version }}.tar.xz"
        checksum: "sha256:{{ zsh_sha256 }}"
        mode: '0644'

    - name: Extract zsh-{{ zsh_version }} source
      unarchive:
        src: "/tmp/zsh-{{ zsh_version }}.tar.xz"
        dest: /tmp
        remote_src: yes
        creates: "/tmp/zsh-{{ zsh_version }}"

    - name: Build and install zsh-{{ zsh_version }}
      shell: |
        cd /tmp/zsh-{{ zsh_version }}
        ./configure --prefix=/usr --enable-pcre --enable-cap --enable-gdbm --enable-multibyte --enable-zsh-secure-free
        make
        make install
      args:
        creates: /usr/bin/zsh

    - name: Install oh-my-zsh
      git:
        repo: https://github.com/ohmyzsh/ohmyzsh.git
        dest: "{{ ohmyzsh_dir }}"
        version: "{{ ohmyzsh_commit }}"
        depth: 1
      register: ohmyzsh_install

    - name: Set oh-my-zsh permissions
      file:
        path: "{{ ohmyzsh_dir }}"
        owner: root
        group: root
        mode: '0755'
        recurse: yes
      when: ohmyzsh_install.changed

    - name: Clone ttf-jetbrains-mono-nerd AUR package
      git:
        repo: https://aur.archlinux.org/ttf-jetbrains-mono-nerd.git
        dest: "{{ aur_pkgs_dir }}/ttf-jetbrains-mono-nerd"
        depth: 1
      become: no
      become_user: "{{ main_user }}"
      register: font_clone

    - name: Build and install ttf-jetbrains-mono-nerd
      shell: |
        cd {{ aur_pkgs_dir }}/ttf-jetbrains-mono-nerd
        makepkg -s --noconfirm
        pacman -U --noconfirm *.pkg.tar.zst
      become: yes
      args:
        creates: /usr/share/fonts/ttf/JetBrainsMonoNerdFont-Bold.ttf
      when: font_clone.changed

    - name: Backup pacman.conf
      copy:
        src: /etc/pacman.conf
        dest: /etc/pacman.conf.bak
        remote_src: yes
        mode: '0644'
      when: not (stat(path='/etc/pacman.conf.bak').exists)

    - name: Prevent zsh and oh-my-zsh updates
      lineinfile:
        path: /etc/pacman.conf
        line: "IgnorePkg = zsh oh-my-zsh-git"
        state: present

    - name: Configure virtual console font
      copy:
        content: "FONT=ter-v16n\n"
        dest: /etc/vconsole.conf
        mode: '0644'
        backup: yes

    - name: Update font cache
      shell: |
        mkfontscale /usr/share/fonts/terminus
        fc-cache -fv
      args:
        executable: /bin/bash

    - name: Set zsh as default shell
      user:
        name: "{{ main_user }}"
        shell: /usr/bin/zsh

    - name: Backup existing .zshrc
      copy:
        src: "{{ user_home }}/.zshrc"
        dest: "{{ user_home }}/.zshrc.bak"
        remote_src: yes
        mode: '0644'
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
      when: (user_home + '/.zshrc') | stat | default({}) | get('exists', False)

    - name: Configure .zshrc
      copy:
        content: |
          # Oh My Zsh configuration
          export ZSH="{{ ohmyzsh_dir }}"
          ZSH_THEME="robbyrussell"
          plugins=(git)
          source "$ZSH/oh-my-zsh.sh"
          export PATH="$HOME/bin:/usr/local/bin:$PATH"
          alias ls='ls --color=auto'
          alias ll='ls -l'
        dest: "{{ user_home }}/.zshrc"
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '0644'

    - name: Create xfce4-terminal config directory
      file:
        path: "{{ user_home }}/.config/xfce4/xfce4-terminal"
        state: directory
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '0755'

    - name: Backup existing xfce4-terminal config
      copy:
        src: "{{ user_home }}/.config/xfce4/xfce4-terminal/terminalrc"
        dest: "{{ user_home }}/.config/xfce4/xfce4-terminal/terminalrc.bak"
        remote_src: yes
        mode: '0644'
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
      when: (user_home + '/.config/xfce4/xfce4-terminal/terminalrc') | stat | default({}) | get('exists', False)

    - name: Configure xfce4-terminal font
      copy:
        content: |
          [Configuration]
          FontName=JetBrainsMono Nerd Font Bold 14
        dest: "{{ user_home }}/.config/xfce4/xfce4-terminal/terminalrc"
        owner: "{{ main_user }}"
        group: "{{ main_user }}"
        mode: '0644'

    - name: Verify zsh installation
      shell: /usr/bin/zsh --version
      register: zsh_version
      failed_when: "'5.9' not in zsh_version.stdout"

    - name: Verify oh-my-zsh installation
      stat:
        path: "{{ ohmyzsh_dir }}"
      register: ohmyzsh_stat
      failed_when: not ohmyzsh_stat.stat.exists

    - name: Verify default shell
      shell: grep "{{ main_user }}.*zsh" /etc/passwd
      register: shell_check
      failed_when: shell_check.rc != 0